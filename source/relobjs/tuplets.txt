
.. _element_tuplet:

Tuplets
--------

A tuplet is a group of notes whose duration is modified; normally a graphic element (a tuplet bracket and/or a number) marks this group of notes. The notes in a tuplet are usually beamed together but this is not always the case.

.. important::
    The tuplet information is splitted for distinguish between graphical information and notes' duration modification information. The :token:`tuplet` element is only for defining the graphical information (presence of tuplet bracket and numbers). The notes' duration modification information is independently provided by the :token:`timeModification` element.

In LDP, to specify the notes that form a tuplet, a :token:`tuplet` element must be included in first and last notes in the tuplet:

.. rst-class:: bnf-rule
.. productionlist:: *
    tuplet :  (t `tupletID` { - | + `actualNotes` `normalNotes` [`tupletOptions`] })
    tupletID : integer_number
    actualNotes : integer number
    normalNotes : integer number
    tupletOptions :  noBracket [`displayBracket`] [`displayNumber`]
    displayBracket : (displayBracket { yes | no })
    displayNumber : (displayNumber { none | actual | both })

.. commented out, for future

    tupletOptions : [`bracketType`] [`displayBracket`] [`displayNumber`]
    bracketType :  (bracketType { squaredBracket | curvedBracket })


The :token:`tupletID` element was introduced for uniquely identifying each tuplet,
mainly to distinguish nested tuplets.

The tuplet type is a plus sign (+) or a minus sign (-) to indicate, respectively, that it is the start or the end of a tuplet. 

The :token:`displayNumber` option is used to display the number of normal notes. By default, only the actual notes number is displayed.

The :token:`displayBracket` option is used for controlling whether to display or not the tuplet bracket. If unspecified, the default behaviour follows the usual engraving rules: the bracket is not displayed if the tuplet notes form a beamed group.

Examples::

    (score (vers 2.0) (instrument (musicData
        (clef G)
        (time 2 4)
        (n c4 e (t 1 + 3 2)(tm 2 3))
        (n d4 e (tm 2 3))
        (n e4 e (t 1 -)(tm 2 3))
    )))

.. image:: ../figures/tuplet-01.png

This example is a triplet of eighth notes. Element `(t 1 + 3 2)` in first note
declares the triplet: it is tuplet number 1; the plus sign says that this note is the start of the tuplet; and 
numbers '3 2' declare that three notes must be played in the time alloted for two notes. The end of the tuplet 
is declared in last note: `(t 1 -)`. The :token:`tuplet` element is just used for defining the graphic elements: the bracket and the 3 number. But has no any effect on the notes duration. For that, a :token:`timeModification` element `(tm 2 3)` must be included in each note:

.. rst-class:: bnf-rule
.. productionlist:: *
    timeModification : (tm `numerator` `denominator`)
    numerator : integer number
    denominator : integer number

The :token:`timeModification` element must be included in all the notes that form the tuplet. The time modificaction information is a multiplication factor to be applied to normal note/rest duration. This factor is defined, as a fraction, by its :token:`numerator` and :token:`denominator`. The :token:`timeModification` element is independent of the tuplet and can be of utility in other situations. For instance, in jazz scores, to alter notes duration when they must be played with swing.

The tuplet element does not implies neither beaming nor time modification. Therefore elements :token:`tuplet`, :token:`timeModification` and :token:`beam` must be combined as needed.

Example 1::

    (score (vers 2.0) (instrument (musicData
        (clef G)
        (time 2 4)
        (n c4 e (t 1 + 3 2)(tm 2 3)(beam 1 +))
        (n d4 e (tm 2 3)(beam 1 =))
        (n e4 e (t 1 -)(tm 2 3)(beam 1 -))
    )))

.. image:: ../figures/tuplet-02.png

Example 2::

    (score (vers 2.0) (instrument (musicData
        (clef G)
        (key A)
        (time 6 8)
        (n f5 q. (tie 1 start))
        (n f5 s (tie 1 stop)(tm 6 7)(t + 7 6)(beam 1 ++))
        (n e5 s (tm 6 7)(beam 1 ==))
        (n +d5 s (tm 6 7)(beam 1 ==))
        (n e5 s (tm 6 7)(beam 1 ==))
        (n +e5 s (tm 6 7)(beam 1 ==))
        (n g5 s (tm 6 7)(beam 1 ==))
        (n f5 s (tm 6 7)(t -)(beam 1 --))
        (barline)
    )))


.. image:: ../figures/tuplet-03.png






